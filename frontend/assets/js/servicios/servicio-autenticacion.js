/**
 * üîê SERVICIO DE AUTENTICACI√ìN
 * Sistema Portafolio Docente UNSAAC
 * 
 * Servicio especializado para todas las operaciones de autenticaci√≥n
 * Interfaz entre el frontend y los endpoints de auth del backend
 */

class ServicioAutenticacion {
   constructor() {
       this.baseURL = '/auth';
       this.endpoints = {
           LOGIN: '/login',
           LOGOUT: '/logout',
           LOGOUT_ALL: '/logout-all',
           REFRESH: '/refresh',
           ME: '/me',
           FORGOT_PASSWORD: '/forgot-password',
           RESET_PASSWORD: '/reset-password',
           CHANGE_PASSWORD: '/change-password',
           VERIFY_PASSWORD: '/verify-password',
           SWITCH_ROLE: '/switch-role',
           SESSIONS: '/sessions',
           PERMISSIONS: '/permissions'
       };
   }

   // ==========================================
   // üö™ OPERACIONES DE SESI√ìN
   // ==========================================

   /**
    * üîë Iniciar sesi√≥n
    */
   async login(credenciales) {
       try {
           // Validaciones previas
           this.validarCredencialesLogin(credenciales);

           // Preparar datos
           const datosLogin = {
               correo: credenciales.correo.toLowerCase().trim(),
               contrasena: credenciales.contrasena,
               recordar: credenciales.recordar || false,
               dispositivoInfo: this.obtenerInfoDispositivo()
           };

           console.log('üîë Iniciando sesi√≥n para:', datosLogin.correo);

           // Realizar petici√≥n
           const response = await window.api.post(this.baseURL + this.endpoints.LOGIN, datosLogin);

           if (response.data.success) {
               const { usuario, token, refreshToken, roles, permisos } = response.data;

               // Procesar respuesta exitosa
               const resultado = {
                   success: true,
                   usuario: usuario,
                   token: token,
                   refreshToken: refreshToken,
                   roles: roles || [],
                   permisos: permisos || [],
                   requiereSeleccionRol: roles && roles.length > 1,
                   mensaje: response.data.message || 'Inicio de sesi√≥n exitoso'
               };

               // Log de √©xito
               console.log('‚úÖ Inicio de sesi√≥n exitoso:', {
                   usuario: usuario.nombres + ' ' + usuario.apellidos,
                   roles: roles,
                   requiereSeleccion: resultado.requiereSeleccionRol
               });

               // M√©tricas
               this.enviarMetricaLogin('success', usuario.id);

               return resultado;

           } else {
               throw new Error(response.data.message || 'Credenciales inv√°lidas');
           }

       } catch (error) {
           console.error('‚ùå Error en login:', error);
           
           // M√©tricas de error
           this.enviarMetricaLogin('failed', null, error.message);
           
           // Procesar error espec√≠fico
           const errorProcesado = this.procesarErrorLogin(error);
           throw errorProcesado;
       }
   }

   /**
    * üö™ Cerrar sesi√≥n
    */
   async logout(cerrarTodasLasSesiones = false) {
       try {
           const usuario = window.auth?.obtenerUsuario();
           const endpoint = cerrarTodasLasSesiones ? 
               this.endpoints.LOGOUT_ALL : 
               this.endpoints.LOGOUT;

           console.log(`üö™ Cerrando sesi√≥n${cerrarTodasLasSesiones ? ' (todas las sesiones)' : ''}...`);

           // Intentar notificar al servidor
           try {
               await window.api.post(this.baseURL + endpoint, {
                   timestamp: Date.now(),
                   dispositivo: this.obtenerInfoDispositivo()
               });
           } catch (error) {
               console.warn('‚ö†Ô∏è Error al notificar logout al servidor:', error);
               // Continuar con logout local aunque falle
           }

           // M√©tricas
           this.enviarMetricaLogout(usuario?.usuario?.id, cerrarTodasLasSesiones);

           console.log('‚úÖ Sesi√≥n cerrada exitosamente');

           return {
               success: true,
               mensaje: 'Sesi√≥n cerrada exitosamente',
               cerrarTodas: cerrarTodasLasSesiones
           };

       } catch (error) {
           console.error('‚ùå Error en logout:', error);
           
           // A√∫n as√≠ devolver √©xito para logout local
           return {
               success: true,
               mensaje: 'Sesi√≥n cerrada localmente',
               error: error.message
           };
       }
   }

   /**
    * üîÑ Refrescar token
    */
   async refreshToken() {
       try {
           const refreshToken = localStorage.getItem(CONFIG.AUTH.REFRESH_TOKEN_KEY);
           
           if (!refreshToken) {
               throw new Error('No hay token de actualizaci√≥n disponible');
           }

           console.log('üîÑ Refrescando token de autenticaci√≥n...');

           const response = await window.api.post(this.baseURL + this.endpoints.REFRESH, {
               refreshToken: refreshToken
           });

           if (response.data.success) {
               const { token, refreshToken: newRefreshToken, usuario } = response.data;

               console.log('‚úÖ Token refrescado exitosamente');

               return {
                   success: true,
                   token: token,
                   refreshToken: newRefreshToken,
                   usuario: usuario
               };

           } else {
               throw new Error(response.data.message || 'No se pudo refrescar el token');
           }

       } catch (error) {
           console.error('‚ùå Error al refrescar token:', error);
           throw new Error('Token de actualizaci√≥n inv√°lido');
       }
   }

   /**
    * üë§ Obtener informaci√≥n del usuario actual
    */
   async me() {
       try {
           console.log('üë§ Obteniendo informaci√≥n del usuario actual...');

           const response = await window.api.get(this.baseURL + this.endpoints.ME);

           if (response.data.success) {
               return {
                   success: true,
                   usuario: response.data.usuario,
                   rolActual: response.data.rolActual,
                   roles: response.data.roles,
                   permisos: response.data.permisos,
                   sesiones: response.data.sesiones
               };
           } else {
               throw new Error(response.data.message || 'No se pudo obtener informaci√≥n del usuario');
           }

       } catch (error) {
           console.error('‚ùå Error al obtener usuario actual:', error);
           throw error;
       }
   }

   // ==========================================
   // üé≠ GESTI√ìN DE ROLES
   // ==========================================

   /**
    * üé≠ Cambiar rol activo
    */
   async cambiarRol(nuevoRol) {
       try {
           // Validar rol
           if (!nuevoRol) {
               throw new Error('Debe especificar un rol');
           }

           console.log(`üé≠ Cambiando a rol: ${nuevoRol}`);

           const response = await window.api.post(this.baseURL + this.endpoints.SWITCH_ROLE, {
               rol: nuevoRol,
               timestamp: Date.now()
           });

           if (response.data.success) {
               const { usuario, rolActual, permisos, redirectUrl } = response.data;

               console.log(`‚úÖ Rol cambiado exitosamente a: ${rolActual}`);

               // M√©tricas
               this.enviarMetricaCambioRol(usuario.id, rolActual);

               return {
                   success: true,
                   usuario: usuario,
                   rolActual: rolActual,
                   permisos: permisos,
                   redirectUrl: redirectUrl,
                   mensaje: `Cambiado a rol: ${this.formatearNombreRol(rolActual)}`
               };

           } else {
               throw new Error(response.data.message || 'No se pudo cambiar el rol');
           }

       } catch (error) {
           console.error('‚ùå Error al cambiar rol:', error);
           throw error;
       }
   }

   /**
    * üîë Obtener permisos actuales
    */
   async obtenerPermisos() {
       try {
           const response = await window.api.get(this.baseURL + this.endpoints.PERMISSIONS);

           if (response.data.success) {
               return {
                   success: true,
                   permisos: response.data.permisos,
                   rolActual: response.data.rolActual
               };
           } else {
               throw new Error(response.data.message || 'No se pudieron obtener los permisos');
           }

       } catch (error) {
           console.error('‚ùå Error al obtener permisos:', error);
           throw error;
       }
   }

   // ==========================================
   // üîê GESTI√ìN DE CONTRASE√ëAS
   // ==========================================

   /**
    * üìß Solicitar recuperaci√≥n de contrase√±a
    */
   async solicitarRecuperacion(correo) {
       try {
           // Validar email
           if (!Utils.Validacion.esEmailValido(correo)) {
               throw new Error('El formato del correo electr√≥nico no es v√°lido');
           }

           console.log('üìß Solicitando recuperaci√≥n de contrase√±a para:', correo);

           const response = await window.api.post(this.baseURL + this.endpoints.FORGOT_PASSWORD, {
               correo: correo.toLowerCase().trim()
           });

           if (response.data.success) {
               console.log('‚úÖ Solicitud de recuperaci√≥n enviada');

               return {
                   success: true,
                   mensaje: response.data.message || 'Se ha enviado un correo con instrucciones para restablecer tu contrase√±a'
               };

           } else {
               throw new Error(response.data.message || 'No se pudo procesar la solicitud');
           }

       } catch (error) {
           console.error('‚ùå Error en recuperaci√≥n de contrase√±a:', error);
           throw error;
       }
   }

   /**
    * üîÑ Restablecer contrase√±a
    */
   async restablecerContrasena(token, nuevaContrasena, confirmarContrasena) {
       try {
           // Validaciones
           this.validarRestablecimientoContrasena(token, nuevaContrasena, confirmarContrasena);

           console.log('üîÑ Restableciendo contrase√±a...');

           const response = await window.api.post(this.baseURL + this.endpoints.RESET_PASSWORD, {
               token: token,
               nuevaContrasena: nuevaContrasena,
               confirmarContrasena: confirmarContrasena
           });

           if (response.data.success) {
               console.log('‚úÖ Contrase√±a restablecida exitosamente');

               return {
                   success: true,
                   mensaje: response.data.message || 'Contrase√±a restablecida exitosamente'
               };

           } else {
               throw new Error(response.data.message || 'No se pudo restablecer la contrase√±a');
           }

       } catch (error) {
           console.error('‚ùå Error al restablecer contrase√±a:', error);
           throw error;
       }
   }

   /**
    * üîê Cambiar contrase√±a (usuario autenticado)
    */
   async cambiarContrasena(contrasenaActual, nuevaContrasena, confirmarContrasena) {
       try {
           // Validaciones
           this.validarCambioContrasena(contrasenaActual, nuevaContrasena, confirmarContrasena);

           console.log('üîê Cambiando contrase√±a...');

           const response = await window.api.post(this.baseURL + this.endpoints.CHANGE_PASSWORD, {
               contrasenaActual: contrasenaActual,
               nuevaContrasena: nuevaContrasena,
               confirmarContrasena: confirmarContrasena
           });

           if (response.data.success) {
               console.log('‚úÖ Contrase√±a cambiada exitosamente');

               return {
                   success: true,
                   mensaje: response.data.message || 'Contrase√±a cambiada exitosamente'
               };

           } else {
               throw new Error(response.data.message || 'No se pudo cambiar la contrase√±a');
           }

       } catch (error) {
           console.error('‚ùå Error al cambiar contrase√±a:', error);
           throw error;
       }
   }

   /**
    * ‚úÖ Verificar contrase√±a actual
    */
   async verificarContrasena(contrasena) {
       try {
           const response = await window.api.post(this.baseURL + this.endpoints.VERIFY_PASSWORD, {
               contrasena: contrasena
           });

           return {
               success: response.data.success,
               valida: response.data.valida || false
           };

       } catch (error) {
           console.error('‚ùå Error al verificar contrase√±a:', error);
           return { success: false, valida: false };
       }
   }

   // ==========================================
   // üì± GESTI√ìN DE SESIONES
   // ==========================================

   /**
    * üìã Obtener sesiones activas
    */
   async obtenerSesiones() {
       try {
           const response = await window.api.get(this.baseURL + this.endpoints.SESSIONS);

           if (response.data.success) {
               return {
                   success: true,
                   sesiones: response.data.sesiones,
                   sesionActual: response.data.sesionActual
               };
           } else {
               throw new Error(response.data.message || 'No se pudieron obtener las sesiones');
           }

       } catch (error) {
           console.error('‚ùå Error al obtener sesiones:', error);
           throw error;
       }
   }

   /**
    * üóëÔ∏è Cerrar sesi√≥n espec√≠fica
    */
   async cerrarSesionEspecifica(sessionId) {
       try {
           const response = await window.api.delete(`${this.baseURL + this.endpoints.SESSIONS}/${sessionId}`);

           if (response.data.success) {
               console.log('‚úÖ Sesi√≥n espec√≠fica cerrada');

               return {
                   success: true,
                   mensaje: response.data.message || 'Sesi√≥n cerrada exitosamente'
               };

           } else {
               throw new Error(response.data.message || 'No se pudo cerrar la sesi√≥n');
           }

       } catch (error) {
           console.error('‚ùå Error al cerrar sesi√≥n espec√≠fica:', error);
           throw error;
       }
   }

   // ==========================================
   // üõ†Ô∏è M√âTODOS AUXILIARES
   // ==========================================

   /**
    * ‚úÖ Validar credenciales de login
    */
   validarCredencialesLogin(credenciales) {
       if (!credenciales.correo) {
           throw new Error('El correo electr√≥nico es requerido');
       }

       if (!credenciales.contrasena) {
           throw new Error('La contrase√±a es requerida');
       }

       if (!Utils.Validacion.esEmailValido(credenciales.correo)) {
           throw new Error('El formato del correo electr√≥nico no es v√°lido');
       }

       if (credenciales.contrasena.length < 6) {
           throw new Error('La contrase√±a debe tener al menos 6 caracteres');
       }
   }

   /**
    * ‚úÖ Validar restablecimiento de contrase√±a
    */
   validarRestablecimientoContrasena(token, nuevaContrasena, confirmarContrasena) {
       if (!token) {
           throw new Error('Token de recuperaci√≥n requerido');
       }

       if (!nuevaContrasena) {
           throw new Error('La nueva contrase√±a es requerida');
       }

       if (!confirmarContrasena) {
           throw new Error('Debe confirmar la nueva contrase√±a');
       }

       if (nuevaContrasena !== confirmarContrasena) {
           throw new Error('Las contrase√±as no coinciden');
       }

       if (!Utils.Validacion.esPasswordValida(nuevaContrasena)) {
           throw new Error('La contrase√±a no cumple con los requisitos de seguridad');
       }
   }

   /**
    * ‚úÖ Validar cambio de contrase√±a
    */
   validarCambioContrasena(contrasenaActual, nuevaContrasena, confirmarContrasena) {
       if (!contrasenaActual) {
           throw new Error('La contrase√±a actual es requerida');
       }

       this.validarRestablecimientoContrasena('dummy', nuevaContrasena, confirmarContrasena);

       if (contrasenaActual === nuevaContrasena) {
           throw new Error('La nueva contrase√±a debe ser diferente a la actual');
       }
   }

   /**
    * üñ•Ô∏è Obtener informaci√≥n del dispositivo
    */
   obtenerInfoDispositivo() {
       return {
           userAgent: navigator.userAgent,
           plataforma: navigator.platform,
           idioma: navigator.language,
           resolucion: `${screen.width}x${screen.height}`,
           timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
           esMovil: CONFIG.DISPOSITIVO?.ES_MOVIL || false,
           timestamp: Date.now()
       };
   }

   /**
    * üö® Procesar errores de login espec√≠ficos
    */
   procesarErrorLogin(error) {
       const codigosError = {
           401: 'Credenciales incorrectas',
           423: 'Cuenta bloqueada temporalmente',
           429: 'Demasiados intentos. Intenta m√°s tarde',
           500: 'Error del servidor. Intenta m√°s tarde'
       };

       const mensaje = codigosError[error.status] || error.message || 'Error al iniciar sesi√≥n';

       return new Error(mensaje);
   }

   /**
    * üè∑Ô∏è Formatear nombre de rol
    */
   formatearNombreRol(rol) {
       const nombres = {
           administrador: 'Administrador',
           verificador: 'Verificador',
           docente: 'Docente'
       };

       return nombres[rol] || Utils.Texto.capitalizarPalabras(rol);
   }

   // ==========================================
   // üìä M√âTRICAS Y ANALYTICS
   // ==========================================

   /**
    * üìä Enviar m√©trica de login
    */
   enviarMetricaLogin(resultado, usuarioId = null, error = null) {
       if (!CONFIG.METRICAS.TRACKING_HABILITADO) return;

       const evento = {
           tipo: 'login',
           resultado: resultado,
           usuarioId: usuarioId,
           timestamp: Date.now(),
           dispositivo: this.obtenerInfoDispositivo(),
           error: error
       };

       // Enviar a analytics
       if (window.gtag) {
           window.gtag('event', 'login', {
               method: 'password',
               success: resultado === 'success',
               user_id: usuarioId
           });
       }

       console.log('üìä M√©trica login:', evento);
   }

   /**
    * üìä Enviar m√©trica de logout
    */
   enviarMetricaLogout(usuarioId = null, cerrarTodas = false) {
       if (!CONFIG.METRICAS.TRACKING_HABILITADO) return;

       const evento = {
           tipo: 'logout',
           usuarioId: usuarioId,
           cerrarTodas: cerrarTodas,
           timestamp: Date.now()
       };

       if (window.gtag) {
           window.gtag('event', 'logout', {
               method: cerrarTodas ? 'logout_all' : 'single',
               user_id: usuarioId
           });
       }

       console.log('üìä M√©trica logout:', evento);
   }

   /**
    * üìä Enviar m√©trica de cambio de rol
    */
   enviarMetricaCambioRol(usuarioId, nuevoRol) {
       if (!CONFIG.METRICAS.TRACKING_HABILITADO) return;

       const evento = {
           tipo: 'cambio_rol',
           usuarioId: usuarioId,
           nuevoRol: nuevoRol,
           timestamp: Date.now()
       };

       if (window.gtag) {
           window.gtag('event', 'role_switch', {
               new_role: nuevoRol,
               user_id: usuarioId
           });
       }

       console.log('üìä M√©trica cambio rol:', evento);
   }

   // ==========================================
   // üîç M√âTODOS DE VERIFICACI√ìN
   // ==========================================

   /**
    * üîç Verificar estado del servicio de auth
    */
   async verificarEstado() {
       try {
           const response = await window.api.get('/health/auth');
           return {
               disponible: response.data.status === 'ok',
               mensaje: response.data.message,
               detalles: response.data
           };
       } catch (error) {
           return {
               disponible: false,
               mensaje: 'Servicio de autenticaci√≥n no disponible',
               error: error.message
           };
       }
   }

   /**
    * üß™ Probar conectividad
    */
   async probarConectividad() {
       try {
           const tiempoInicio = Date.now();
           await window.api.get('/health');
           const tiempoRespuesta = Date.now() - tiempoInicio;

           return {
               conectado: true,
               tiempoRespuesta: tiempoRespuesta,
               calidad: tiempoRespuesta < 1000 ? 'buena' : tiempoRespuesta < 3000 ? 'regular' : 'mala'
           };
       } catch (error) {
           return {
               conectado: false,
               error: error.message
           };
       }
   }
}

// üöÄ Crear instancia global
window.ServicioAuth = new ServicioAutenticacion();

// üì§ Exportar para m√≥dulos ES6
if (typeof module !== 'undefined' && module.exports) {
   module.exports = ServicioAutenticacion;
}

console.log('üîê Servicio de autenticaci√≥n inicializado correctamente');
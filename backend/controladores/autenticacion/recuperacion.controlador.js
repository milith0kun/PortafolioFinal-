/**
 * üîë CONTROLADOR DE RECUPERACI√ìN DE CONTRASE√ëAS
 * 
 * Gestiona el proceso completo de recuperaci√≥n de contrase√±as:
 * - Solicitud de recuperaci√≥n por email
 * - Generaci√≥n de tokens de recuperaci√≥n
 * - Env√≠o de emails con enlaces de recuperaci√≥n
 * - Validaci√≥n de tokens de recuperaci√≥n
 * - Restablecimiento de contrase√±as
 * 
 * Rutas que maneja:
 * POST /api/v1/auth/forgot-password - Solicitar recuperaci√≥n
 * POST /api/v1/auth/reset-password - Restablecer contrase√±a
 */

// TODO: Generar token √∫nico de recuperaci√≥n con expiraci√≥n
// TODO: Enviar email con enlace de recuperaci√≥n
// TODO: Validar token de recuperaci√≥n
// TODO: Permitir establecer nueva contrase√±a
// TODO: Invalidar tokens usados
/**
 * üîë CONTROLADOR RECUPERACI√ìN - Sistema Portafolio Docente UNSAAC
 * Maneja recuperaci√≥n y restablecimiento de contrase√±as
 */

const bcrypt = require('bcryptjs');
const crypto = require('crypto');
const { ejecutarConsulta } = require('../../base_datos/conexiones/pool.conexion');
/**
 * üìß Solicitar recuperaci√≥n de contrase√±a
 */
async function solicitarRecuperacion(req, res) {
    try {
        const { correo } = req.body;

        if (!correo) {
            return res.status(400).json({
                success: false,
                message: 'El correo es obligatorio'
            });
        }

        // Verificar que el usuario existe
        const usuarios = await ejecutarConsulta(
            'SELECT id, nombres, apellidos FROM usuarios WHERE correo = ? AND activo = 1',
            [correo]
        );

        // Siempre responder exitosamente por seguridad (no revelar si el email existe)
        if (usuarios.length === 0) {
            return res.json({
                success: true,
                message: 'Si el correo existe, recibir√°s instrucciones para recuperar tu contrase√±a'
            });
        }

        const usuario = usuarios[0];

        // Generar token de recuperaci√≥n
        const token = crypto.randomBytes(32).toString('hex');
        const expiracion = new Date(Date.now() + 3600000); // 1 hora

        // Guardar token en base de datos
        await ejecutarConsulta(
            'UPDATE usuarios SET token_recuperacion = ?, expiracion_token = ? WHERE id = ?',
            [token, expiracion, usuario.id]
        );

        // TODO: Aqu√≠ enviar√≠as el email con el token
        console.log(`üîë Token de recuperaci√≥n para ${correo}: ${token}`);

        res.json({
            success: true,
            message: 'Si el correo existe, recibir√°s instrucciones para recuperar tu contrase√±a',
            // Solo en desarrollo - remover en producci√≥n
            debug_token: process.env.NODE_ENV === 'development' ? token : undefined
        });

    } catch (error) {
        console.error('‚ùå Error al solicitar recuperaci√≥n:', error);
        res.status(500).json({
            success: false,
            message: 'Error interno del servidor'
        });
    }
}

/**
 * ‚úÖ Verificar token de recuperaci√≥n
 */
async function verificarTokenRecuperacion(req, res) {
    try {
        const { token } = req.params;

        if (!token) {
            return res.status(400).json({
                success: false,
                message: 'Token requerido'
            });
        }

        // Buscar usuario con token v√°lido
        const usuarios = await ejecutarConsulta(
            `SELECT id, nombres, apellidos, correo 
             FROM usuarios 
             WHERE token_recuperacion = ? 
             AND expiracion_token > NOW() 
             AND activo = 1`,
            [token]
        );

        if (usuarios.length === 0) {
            return res.status(400).json({
                success: false,
                message: 'Token inv√°lido o expirado'
            });
        }

        res.json({
            success: true,
            message: 'Token v√°lido',
            usuario: {
                id: usuarios[0].id,
                nombres: usuarios[0].nombres,
                apellidos: usuarios[0].apellidos,
                correo: usuarios[0].correo
            }
        });

    } catch (error) {
        console.error('‚ùå Error al verificar token:', error);
        res.status(500).json({
            success: false,
            message: 'Error interno del servidor'
        });
    }
}

/**
 * üîÑ Restablecer contrase√±a
 */
async function restablecerContrasena(req, res) {
    try {
        const { token, nueva_contrasena } = req.body;

        if (!token || !nueva_contrasena) {
            return res.status(400).json({
                success: false,
                message: 'Token y nueva contrase√±a son obligatorios'
            });
        }

        // Validar longitud de contrase√±a
        if (nueva_contrasena.length < 6) {
            return res.status(400).json({
                success: false,
                message: 'La contrase√±a debe tener al menos 6 caracteres'
            });
        }

        // Buscar usuario con token v√°lido
        const usuarios = await ejecutarConsulta(
            `SELECT id FROM usuarios 
             WHERE token_recuperacion = ? 
             AND expiracion_token > NOW() 
             AND activo = 1`,
            [token]
        );

        if (usuarios.length === 0) {
            return res.status(400).json({
                success: false,
                message: 'Token inv√°lido o expirado'
            });
        }

        const usuario = usuarios[0];

        // Encriptar nueva contrase√±a
        const contrasenaHash = await bcrypt.hash(nueva_contrasena, 12);

        // Actualizar contrase√±a y limpiar token
        await ejecutarConsulta(
            `UPDATE usuarios 
             SET contrasena = ?, token_recuperacion = NULL, expiracion_token = NULL 
             WHERE id = ?`,
            [contrasenaHash, usuario.id]
        );

        res.json({
            success: true,
            message: 'Contrase√±a restablecida exitosamente'
        });

    } catch (error) {
        console.error('‚ùå Error al restablecer contrase√±a:', error);
        res.status(500).json({
            success: false,
            message: 'Error interno del servidor'
        });
    }
}

/**
 * üîí Cambiar contrase√±a (usuario autenticado)
 */
async function cambiarContrasena(req, res) {
    try {
        const { contrasena_actual, nueva_contrasena } = req.body;

        if (!contrasena_actual || !nueva_contrasena) {
            return res.status(400).json({
                success: false,
                message: 'Contrase√±a actual y nueva contrase√±a son obligatorias'
            });
        }

        // Validar longitud de nueva contrase√±a
        if (nueva_contrasena.length < 6) {
            return res.status(400).json({
                success: false,
                message: 'La nueva contrase√±a debe tener al menos 6 caracteres'
            });
        }

        // Obtener contrase√±a actual del usuario
        const usuarios = await ejecutarConsulta(
            'SELECT contrasena FROM usuarios WHERE id = ?',
            [req.usuario.id]
        );

        if (usuarios.length === 0) {
            return res.status(404).json({
                success: false,
                message: 'Usuario no encontrado'
            });
        }

        // Verificar contrase√±a actual
        const contrasenaValida = await bcrypt.compare(contrasena_actual, usuarios[0].contrasena);
        if (!contrasenaValida) {
            return res.status(400).json({
                success: false,
                message: 'La contrase√±a actual es incorrecta'
            });
        }

        // Encriptar nueva contrase√±a
        const contrasenaHash = await bcrypt.hash(nueva_contrasena, 12);

        // Actualizar contrase√±a
        await ejecutarConsulta(
            'UPDATE usuarios SET contrasena = ? WHERE id = ?',
            [contrasenaHash, req.usuario.id]
        );

        res.json({
            success: true,
            message: 'Contrase√±a cambiada exitosamente'
        });

    } catch (error) {
        console.error('‚ùå Error al cambiar contrase√±a:', error);
        res.status(500).json({
            success: false,
            message: 'Error interno del servidor'
        });
    }
}

module.exports = {
    solicitarRecuperacion,
    verificarTokenRecuperacion,
    restablecerContrasena,
    cambiarContrasena
};